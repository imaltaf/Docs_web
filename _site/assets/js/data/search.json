[
  
  {
    "title": "Completed Pipline Automate For Docs",
    "url": "/posts/completed-pipline-automate-for-docs/",
    "categories": "",
    "tags": "",
    "date": "2023-08-29 00:00:00 +0530",
    





    
    "snippet": "DevSecOps Project Setup GuideIntroductionIn this comprehensive DevSecOps project setup guide, we’ll ensure the security of your software development and deployment pipeline by integrating a wide ra...",
    "content": "DevSecOps Project Setup GuideIntroductionIn this comprehensive DevSecOps project setup guide, we’ll ensure the security of your software development and deployment pipeline by integrating a wide range of tools and services. Here are the tools we’ll be using:  Version Control: Git/GitHub  Continuous Integration and Continuous Deployment (CI/CD): Jenkins  Dynamic Application Security Testing: OWASP ZAP  Kubernetes: Container Orchestration  Code Quality and Static Analysis: SonarQube  Continuous Delivery: ArgoCD  Web Server: Nginx  Container Registry: Docker Hub  Container Security Scanning: Clair  Secrets Management: HashiCorp Vault  Cloud Infrastructure: Oracle Cloud  Vulnerability Scanning: OpenVAS  Web Application Firewall: ModSecurity  Identity and Access Management: Keycloak  Configuration Management: AnsibleAWS and Oracle Cloud Server DeploymentAWS Deployment:  Host your application on AWS using services like EC2 for virtual servers, S3 for storage, RDS for managed databases, or ECS for container orchestration. Choose the appropriate AWS services based on your project’s requirements.  Follow the AWS Documentation for detailed instructions on deploying your application.Installation StepsOracle Cloud Deployment:  If you choose Oracle Cloud as your hosting provider, Always Free Services: Oracle offered several “Always Free” services, which are available to use at no cost indefinitely. These services typically included compute, storage, and databases.  Refer to the Oracle Cloud Documentation for specific deployment guidelines tailored to Oracle Cloud.Ensure that your deployment processes are automated and integrated into your CI/CD pipeline for consistent and reliable application deployment to both AWS and Oracle Cloud.Installation StepsStep 1: Project Initialization  Create a new project repository on GitHub.Install DependenciesBefore you begin, ensure you have the following:  Ruby (&gt;= 2.4)  RubyGems  Bundlersudo apt updatesudo apt install ruby-full build-essential zlib1g-dev gitTo avoid installing RubyGems packages as the root user:If you are using bash (usually the default for most)echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrcecho 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrcecho 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrcsource ~/.bashrcIf you are using zsh (you know if you are)echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.zshrcecho 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.zshrcecho 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.zshrcsource ~/.zshrcInstall Jekyll bundlergem install jekyll bundlerChirpy Jekyll Theme - Quick Start GuideVisit: https://github.com/cotes2020/jekyll-theme-chirpy#quick-startInstallation  Clone the imaltaf repository:git clone https://github.com/imaltaf/Docs_webthen install your dependenciescd Docs_web bundle Jekyll CommandsTesting Sitebundle exec jekyll sCreating a PostNaming ConventionsJekyll uses a naming convention for pages and postsCreate a file in _posts with the formatYEAR-MONTH-DAY-title.mdFor example:  2022-05-23-homelab-docs.md  2022-05-34-hardware-specs.mdLet’s start AutomateStep 2: Choose Your Tech Stack  Determine the technology stack for your project, including programming languages and frameworks, and document it in your project’s README.md.Step 3: Set Up Continuous Integration (CI)3.1. Install and configure Jenkins for CI/CD. You can follow the official documentation: Jenkins Documentation.sudo apt update &amp;&amp; apt upgradeInstall jenkins using Docker-composemkdir jenkinscd jenkinssudo nano docker-compose.yml version: '3'services:  jenkins:    image: jenkins/jenkins:latest    container_name: jenkins    restart: on-failure    ports:      - \"8084:8080\"      - \"50000:50000\"    volumes:      - jenkins_home:/var/jenkins_homevolumes:  jenkins_home:And save filesudo docker-compose up -d Full installation "
  },
  
  {
    "title": "Install SonarQube in Docker",
    "url": "/posts/install-Sonar-Qube-in-Docker/",
    "categories": "Blogging, Tutorial",
    "tags": "writing, DevOps",
    "date": "2023-08-26 11:40:00 +0530",
    





    
    "snippet": "How to set up SonarQube with a Docker Compose and DBTo set up SonarQube with a Docker Compose configuration and an accompanying database, you can use the following example. This configuration uses ...",
    "content": "How to set up SonarQube with a Docker Compose and DBTo set up SonarQube with a Docker Compose configuration and an accompanying database, you can use the following example. This configuration uses SonarQube with a PostgreSQL database. Make sure you have Docker and Docker Compose installed on your system before proceeding.Create a file named docker-compose.yml and add the following content:version: '3'services:  sonarqube:    image: sonarqube:latest    ports:      - \"9000:9000\"    environment:      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar      - SONARQUBE_JDBC_USERNAME=sonar      - SONARQUBE_JDBC_PASSWORD=sonar    volumes:      - sonarqube_data:/opt/sonarqube/data      - sonarqube_extensions:/opt/sonarqube/extensions      - sonarqube_logs:/opt/sonarqube/logs      - sonarqube_temp:/opt/sonarqube/temp    depends_on:      - sonarqube-db  sonarqube-db:    image: postgres:latest    environment:      - POSTGRES_USER=sonar      - POSTGRES_PASSWORD=sonar    volumes:      - postgres_data:/var/lib/postgresql/datavolumes:  sonarqube_data:  sonarqube_extensions:  sonarqube_logs:  sonarqube_temp:  postgres_data:In this configuration:      We define two services: sonarqube for SonarQube and sonarqube-db for PostgreSQL.        The sonarqube service uses the official SonarQube image and sets up environment variables for the database connection.        Volumes are defined for persisting data between container restarts.        The depends_on option ensures that the sonarqube-db service starts before the sonarqube service.  To start SonarQube with the database, run the following command in the same directory as your docker-compose.yml file:docker-compose up -dThis command will download the required Docker images and start the containers in the background. SonarQube will be available at http://localhost:9000 once it’s up and running.You can access the SonarQube web interface with the default credentials (admin/admin). Be sure to change the admin password after the initial login.Note: This example uses basic configurations, and it’s important to adjust security and other settings as per your specific requirements in a production environment."
  }
  
]

